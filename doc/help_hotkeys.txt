*help_hotkeys.txt*  VIM hotkeys cheet sheet

==============================================================================
Contents                                *help_hotkeys* *help_hotkeys-contents*

User defined keys        |Help_hotkeys-user_keys|
Folder                   |help_hotkeys-folder|
Jumps                    |help_hotkeys-jumps|
Word repeat              |help_hotkeys-word_repeat|
Auto complete            |help_hotkeys-auto_complete|
Pager                    |help_hotkeys-pager|
Split window             |help_hotkeys-split_window|
VimDiff                  |help_hotkeys-vimdiff|
Sort                     |help_hotkeys-sort|
YankRing                 |help_hotkeys-yankring|
CtrlP                    |help_hotkeys-ctrlp|
Surround                 |help_hotkeys-surround|
TComment                 |help_hotkeys-tcomment|
VIM bookmarks            |help_hotkeys-vim-bookmarks|
Tips                     |help_hotkeys-tips|
Source help doc changed  |help_hotkeys-source_help|

==============================================================================
User defined keys                                     *help_hotkeys-user_keys*


" Hotkeys
    noremap <F1> :call NTToggle()<CR>
    noremap <F2> :TagbarToggle<CR>
    noremap <F3> :CtrlSF<Space>
    noremap <F4> :GundoToggle<CR>
    noremap <F5> :SaveSession!<CR>
    noremap <F6> :NewSession<CR>
    noremap <F7> :OpenSession!<CR>
    noremap <F8> :DeleteSession<CR>
    set pastetoggle=<F9>
    noremap <F10> :call SetEncoding()<CR>
    noremap <F11> :retab<CR> :call RTrailing()<CR>
    noremap <F12> :help_hotkeys<CR>
" Unbind the C-S, C-X for other usages
    "noremap <C-S> <NOP> " handle by emmet
    noremap <C-X> <NOP>
    " obtain/pull difference
    noremap <C-X>. do
    noremap <C-X>, dp
    noremap <C-X>> do
    noremap <C-X>< dp
    " number add/sub 1
    noremap <C-X>= <C-A>
    noremap <C-X>+ <C-A>
    noremap <C-X>- <C-X>
    noremap <C-X>_ <C-X>
" Switch buffers
    noremap <C-left> :bp<CR>
    noremap <C-right> :bn<CR>
    noremap <C-up> :BufExplorer<CR>
    noremap <C-down> :bd<CR>
    noremap <leader><left> :bp<CR>
    noremap <leader><right> :bn<CR>
    noremap <leader><up> :BufExplorer<CR>
    noremap <leader><down> :bd<CR>
    noremap <C-X>h :bp<CR>
    noremap <C-X>l :bn<CR>
    noremap <C-X>k :BufExplorer<CR>
" Switch between windows
    noremap <C-H> <C-W>h
    noremap <C-J> <C-W>j
    noremap <C-K> <C-W>k
    noremap <C-L> <C-W>l
" Split windows
    nnoremap <C-\> :vsp<CR>
    nnoremap <C-_> :sp<CR>
" Split windows size
    noremap <C-W>+ :resize +10<CR>
    noremap <C-W>- :resize -10<CR>
    noremap <C-W>> :vertical resize +10<CR>
    noremap <C-W>< :vertical resize -10<CR>
    noremap <C-W>. :vertical resize +20<CR>
    noremap <C-W>, :vertical resize -20<CR>
" Force save the file by sudo privieges
    noremap <leader>w :w !sudo tee %<CR>
" Switch indent modes
    noremap <leader>1 :call ReadMode()<CR>
    noremap <leader>2 :call EditMode()<CR>
    noremap <leader>3 :call KernelMode()<CR>
" Diff file with current modify
    noremap <leader>d :DiffSaved<CR>
    noremap <leader>6 :DiffSaved<CR>
" Gen help docs
    noremap <leader>8 :helptags ~/.vim/doc<CR>
" Rebind the vim help file
    inoremap <F1> <ESC> :call NTToggle()<CR>
    noremap <leader>9 :help_hotkeys<CR>
    noremap <leader>0 :help<CR>
" Plugin: SignifyToggle
    noremap <leader>4 :SignifyToggle<CR>
" Plugin: Gitv
    noremap <leader>5 :Gitv<CR>
" Plugin: Gtags
    noremap <leader>g :Gtags<CR>
    noremap <leader>s :Gtags -s<CR>
    noremap <leader>r :Gtags -r<CR>
    noremap <leader>z :cp<CR>
    noremap <leader>x :cn<CR>
    noremap <leader>q :cclose<CR>
" Plugin: CtrlP
    " default bindings conflict with yankring bindings
    noremap <leader>p :CtrlPMixed<CR>
" Plugin: YouCompleteMe
    noremap <leader>j :YcmCompleter GoTo<CR>
" Plugin: Emmet (Zen Coding)
    let g:user_emmet_expandabbr_key = '<C-S>'

==============================================================================
Folder                                                   *help_hotkeys-folder*

zo  " open
zO  " open all
zc  " close
zC  " close all

==============================================================================
Jumps                                                     *help_hotkeys-jumps*

<C-O>  " jump back to the previous (older) location
<C-I>  " jump forward to the next (newer) location

[{  " jump to the beginning of a C code block (while, switch, if etc)
]}  " jump to the end of a C code block (while, switch, if etc)
[(  " jump to the beginning of a parenthesis
})  " jump to the end of a parenthesis
[[  " sections backward or to the previous '{' in the first column.
]]  " sections forward or to the next '{' in the first column.
[]  " sections backward or to the previous '}' in the first column.

==============================================================================
Word repeat                                         *help_hotkeys-word_repeat*

In insert mode:
<C-y>  " repeat up line
<C-e>  " repeat down line

numbers:
<C-a>  " n++
<C-x>  " n--

==============================================================================
Auto complete                                     *help_hotkeys-auto_complete*

<C-p>  " previous
<C-n>  " next
<C-i>  " singal line
<C-f>  " file name

==============================================================================
Pager                                                     *help_hotkeys-pager*

<C-u>  " up half page
<C-d>  " down half page
<C-f>  " forward one page
<C-b>  " backup on page

==============================================================================
Split window                                        *help_hotkeys-split_window*

sp   " Split current window in two.
vsp  " Split vertically.
<C-w> [+|-]  " resize windows
<C-w> [<|>]  " resize windows with a vertical split
<C-w> _  " maximize current window
<C-w> =  " make all equal size

==============================================================================
VimDiff                                                 *help_hotkeys-vimdiff*

do  " o for "obtain"
dp  " p for "put"
]c  " Jump to the next change.
[c  " Jump to the previous change.
:diffupdate  " diff update

==============================================================================
Sort                                                       *help_hotkeys-sort*

:'<,'>!sort

==============================================================================
YankRing                                               *help_hotkeys-yankring*

<C-p>  " (P for previous) to replace the text last pasted
<C-n>  " (N for next) to replace the previous pasted

==============================================================================
CtrlP                                                     *help_hotkeys-ctrlp*

<C-d>  " filename mode

==============================================================================
Surround                                               *help_hotkeys-surround*

Normal mode
-----------
ds   " delete a surrounding
cs   " change a surrounding
ys   " add a surrounding
yS   " add a surrounding and place the surrounded text on a new line + indent it
yss  " add a surrounding to the whole line
ySs  " add a surrounding to the whole line, place it on a new line + indent it
ySS  " same as ySs

Visual mode
-----------
s  " in visual mode, add a surrounding
S  " in visual mode, add a surrounding but place text on new line + indent it

Insert mode
-----------
<C-s>  " in insert mode, add a surrounding
<C-s><C-s>  " in insert mode, add a new line + surrounding + indent
<C-g>s  " same as <CTRL-s>
<C-g>S  " same as <CTRL-s><CTRL-s>

The . command will work with ds, cs, and yss if you install repeat.vim.

==============================================================================
TComment                                               *help_hotkeys-tcomment*

Primary key maps for normal and insert mode:

    <c-_><c-_>   :: :TComment
    <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>
    <c-_>b       :: :TCommentBlock
                    In insert mode, the cursor will be positioned inside
                    the comment. In normal mode, the cursor will stay
                    put.
    <c-_>a       :: :TCommentAs <QUERY COMMENT TYPE>
    <c-_>n       :: :TCommentAs &filetype <QUERY COUNT>
    <c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>
    <c-_>i       :: :TCommentInline (in normal and insert mode, this map will
                    create an empty inline comment, which isn't suitable for
                    all filetypes though)
                    In insert mode, the cursor will be positioned inside
                    the comment. In normal mode, the cursor will stay
                    put.
    <c-_>r       :: :TCommentRight
    <c-_>p       :: Comment the current inner paragraph
    <c-_><Count> :: Set the count argument (a number from 1 to 9) for use with
                    the subsequent tcomment map/command (see
                    |tcomment#Comment()|)
                    E.g. in JavaScript, in order to get an empty /** */
                    comment for documentation purposes, in insert mode type
                    <c-_>2<c-_>i
                    In order to get an empty block comment like >
                      /**
                       *
                       */
<                   type <c-_>2<c-_>b

==============================================================================
VIM bookmarks                                     *help_hotkeys-vim-bookmarks*

| Action | Shortcut                   | Command                                    |
|--------|----------------------------|--------------------------------------------|
| mm     | :BookmarkToggle            | Add/remove bookmark at current line        |
| mi     | :BookmarkAnnotate <TEXT>   | Add/edit/remove annotation at current line |
| mn     | :BookmarkNext              | Jump to next bookmark in buffer            |
| mp     | :BookmarkPrev              | Jump to previous bookmark in buffer        |
| ma     | :BookmarkShowAll           | Show all bookmarks (toggle)                |
| mc     | :BookmarkClear             | Clear bookmarks in current buffer only     |
| mx     | :BookmarkClearAll          | Clear bookmarks in all buffers             |
|        | :BookmarkSave <FILE_PATH>  | Save all bookmarks to a file               |
|        | :BookmarkLoad <FILE_PATH>  | Load bookmarks from a file                 |

==============================================================================
Tips                                                       *help_hotkeys-tips*

yiw   " Copy the current word
viwp  " Replace the current word with the clipboard contents
:help key-notation  " lists the meanings of all those <key>

==============================================================================
Source help doc changed                             *help_hotkeys-source_help*

:helptags ~/.vim/doc
