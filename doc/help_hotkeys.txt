*help_hotkeys.txt*  VIM hotkeys cheet sheet

==============================================================================
Contents                                *help_hotkeys* *help_hotkeys-contents*

User Defined Keys                               |Help_hotkeys-user_keys|
Jumps                                           |help_hotkeys-jumps|
Pager                                           |help_hotkeys-pager|
Split Window                                    |help_hotkeys-split_window|
Folder                                          |help_hotkeys-folder|
Switching Case                                  |help_hotkeys-switching_case|
Word Repeat                                     |help_hotkeys-word_repeat|
Auto Complete                                   |help_hotkeys-auto_complete|
VimDiff                                         |help_hotkeys-vimdiff|
Sort                                            |help_hotkeys-sort|
Recording                                       |help_hotkeys-recording|
YankRing                                        |help_hotkeys-yankring|
CtrlP                                           |help_hotkeys-ctrlp|
Surround                                        |help_hotkeys-surround|
TComment                                        |help_hotkeys-tcomment|
VIM Signature                                   |help_hotkeys-vim-signature|
VIM Easy Align                                  |help_hotkeys-vim-easy-align|
VIM Easygrep                                    |help_hotkeys-vim-easygrep|
Tips                                            |help_hotkeys-tips|
Apply Help Documents Changing                   |help_hotkeys-helptags|

==============================================================================
User Defined Keys                                     *help_hotkeys-user_keys*


" Hotkeys
    noremap <F1> :call NTToggle()<CR>
    noremap <F2> :TagbarToggle<CR>
    noremap <F3> :SignifyToggle<CR>
    noremap <F4> :UndotreeToggle<CR>
    noremap <F5> :SaveSession!<CR>
    noremap <F6> :NewSession<CR>
    noremap <F7> :OpenSession!<CR>
    noremap <F8> :DeleteSession<CR>
    noremap <F9> :call MouseToggle()<CR>
    noremap <F10> :retab<CR> :call RTrailing()<CR>
    noremap <F11> :call SetEncoding()<CR>
    noremap <F12> :help_hotkeys<CR>
" Unbind the C-S, C-X for other usages
    "noremap <C-S> <NOP> " handle by emmet
    noremap <C-X> <NOP>
    " obtain/pull difference
    noremap <C-X>. do
    noremap <C-X>, dp
    noremap <C-X>> do
    noremap <C-X>< dp
    " number add/sub 1
    noremap <C-X>= <C-A>
    noremap <C-X>+ <C-A>
    noremap <C-X>- <C-X>
    noremap <C-X>_ <C-X>
" Switch buffers
    noremap <C-left> :bp<CR>
    noremap <C-right> :bn<CR>
    noremap <C-up> :BufExplorer<CR>
    noremap <C-down> :bd<CR>
    noremap <leader><left> :bp<CR>
    noremap <leader><right> :bn<CR>
    noremap <leader><up> :BufExplorer<CR>
    noremap <leader><down> :bd<CR>
    noremap <C-X>h :bp<CR>
    noremap <C-X>l :bn<CR>
    noremap <C-X>k :BufExplorer<CR>
" Switch between windows
    noremap <C-H> <C-W>h
    noremap <C-J> <C-W>j
    noremap <C-K> <C-W>k
    noremap <C-L> <C-W>l
" Split windows
    nnoremap <C-\> :vsp<CR>
    nnoremap <C-_> :sp<CR>
" Split windows size
    noremap <C-W>+ :resize +10<CR>
    noremap <C-W>- :resize -10<CR>
    noremap <C-W>= :vertical resize +10<CR>
    noremap <C-W>- :vertical resize -10<CR>
" Force save the file by sudo privieges
    noremap <leader>w :w !sudo tee %<CR>
" Go to middle of line in vim
    noremap gm :call cursor(0, len(getline('.'))/2)<CR>
" Switch indent modes
    noremap <leader>1 :call ReadMode()<CR>
    noremap <leader>2 :call EditMode()<CR>
    noremap <leader>3 :call KernelMode()<CR>
" Diff file with current modify
    noremap <leader>d :DiffSaved<CR>
" Gen help docs
    noremap <leader>9 :helptags ~/.vim/doc<CR>
" Rebind the vim help file
    inoremap <F1> <ESC> :call NTToggle()<CR>
    noremap <leader>0 :help<CR>
" Plugin: vim-signify
    noremap <leader>5 :CtrlSF<CR>
" Plugin: undotree
    noremap <leader>6 :YcmGenerateConfig<CR>
" Plugin: vim-autoformat
    noremap <leader>7 :Autoformat<CR>
" Plugin: gitv
    noremap <leader>8 :Gitv<CR>
" Plugin: gtags.vim
    noremap <leader>g :Gtags<CR>
    noremap <leader>s :Gtags -s<CR>
    noremap <leader>r :Gtags -r<CR>
    noremap <leader>z :cp<CR>
    noremap <leader>x :cn<CR>
    noremap <leader>q :cclose<CR>
" Plugin: ctrlp.vim
    " Default bindings conflict with yankring bindings
    let g:ctrlp_map = '<leader>p'
" Plugin: vim-multiple-cursors
    g:multi_cursor_next_key='<C-j>'
    g:multi_cursor_prev_key='<C-k>'
    g:multi_cursor_skip_key='<C-x>'
    g:multi_cursor_quit_key='<Esc>'
" Plugin: vim-easyclip/YankRing
    <C-p>  " (P for previous) to replace the text last pasted
    <C-n>  " (N for next) to replace the previous pasted

==============================================================================
Jumps                                                     *help_hotkeys-jumps*

<C-O>  " jump back to the previous (older) location
<C-I>  " jump forward to the next (newer) location

[{  " jump to the beginning of a C code block (while, switch, if etc)
]}  " jump to the end of a C code block (while, switch, if etc)
[(  " jump to the beginning of a parenthesis
})  " jump to the end of a parenthesis
[[  " sections backward or to the previous '{' in the first column.
]]  " sections forward or to the next '{' in the first column.
[]  " sections backward or to the previous '}' in the first column.

h   " move one character left
j   " move one row down
k   " move one row up
l   " move one character right
w   " move to beginning of next word
b   " move to beginning of previous word
e   " move to end of word
W   " move to beginning of next word after a whitespace
B   " move to beginning of previous word before a whitespace
E   " move to end of word before a whitespace
All the above movements can be preceded by a count;
e.g. 4j will move down 4 lines.

0   " move to beginning of line
$   " move to end of line
^   " move to first non-blank char of the line
_   " same as above, but can take a count to go to a different line
g_  " move to last non-blank char of the line (can also take a count as above)

gg  " move to first line
G   " move to last line
nG  " move to n'th line of file (where n is a number)

H   " move to top of screen
M   " move to middle of screen
L   " move to bottom of screen

z.  " put the line with the cursor at the center
zt  " put the line with the cursor at the top
zb  " put the line with the cursor at the bottom of the screen

Ctrl-D  " move half-page down
Ctrl-U  " move half-page up
Ctrl-B  " page up
Ctrl-F  " page down
Ctrl-o  " jump to last cursor position
Ctrl-i  " jump to next cursor position

n   " next matching search pattern
N   " previous matching search pattern
*   " next word under cursor
#   " previous word under cursor
g*  " next matching search pattern under cursor
g#  " previous matching search pattern under cursor

%   " jump to matching bracket { } [ ] ( )

:call cursor(0, len(getline('.'))/2) " Go to middle of line in vim

==============================================================================
Pager                                                     *help_hotkeys-pager*

<C-u>  " up half page
<C-d>  " down half page
<C-f>  " forward one page
<C-b>  " backup on page

==============================================================================
Split Window                                       *help_hotkeys-split_window*

sp   " Split current window in two.
vsp  " Split vertically.
<C-w> [+|-]  " resize windows
<C-w> [<|>]  " resize windows with a vertical split
<C-w> _  " maximize current window
<C-w> =  " make all equal size

==============================================================================
Folder                                                   *help_hotkeys-folder*

zo  " open
zO  " open all
zc  " close
zC  " close all

==============================================================================
Switching Case of Characters                     *help_hotkeys-switching_case*

~       Toggle case of the character under the cursor, or all visually-selected
        characters.

3~      Toggle case of the next three characters.
g~3w    Toggle case of the next three words.
g~iw    Toggle case of the current word (inner word â€“ cursor anywhere in word).
g~$     Toggle case of all characters to end of line.
g~~     Toggle case of the current line (same as V~).

The above uses ~ to toggle case. In each example, you can replace ~ with u to
convert to lowercase, or with U to convert to uppercase. For example:

U       Uppercase the visually-selected text.
        First press v or V then move to select text.
        If you don't select text, pressing U will undo all changes to the
        current line.

gUU     Change the current line to uppercase (same as VU).
gUiw    Change current word to uppercase.

u       Lowercase the visually-selected text.
        If you don't select text, pressing u will undo the last change.

guu     Change the current line to lowercase (same as Vu).

==============================================================================
Word Repeat                                         *help_hotkeys-word_repeat*

In insert mode:
<C-y>  " repeat up line
<C-e>  " repeat down line

numbers:
<C-a>  " n++
<C-x>  " n--

==============================================================================
Auto Complete                                     *help_hotkeys-auto_complete*

<C-p>  " previous
<C-n>  " next
<C-i>  " single line
<C-f>  " file name


==============================================================================
VimDiff                                                 *help_hotkeys-vimdiff*

do  " o for "obtain"
dp  " p for "put"
]c  " Jump to the next change.
[c  " Jump to the previous change.
:diffupdate  " diff update

==============================================================================
Sort                                                       *help_hotkeys-sort*

:'<,'>!sort

==============================================================================
Recording                                             *help_hotkeys-recording*

q<register>     " start recorfing
                " do sth...
q               " stop recording
@<register>     " execute recording

eg.
Here is an example to replace string OldString with NewString contained in
multiple *.cpp files:
    vim *.cpp
    qx          # start recording to register x
    :%s/OldString/NewString/g
    :wnext
    q           # stop recording
    @x          # playback to see if it works correctly
    999@x       # repeat 999 times to complete the job

One way to edit a recording (for example, to register x) is to paste it into a
new buffer, then edit the buffer, then copy the results back into the register.
For example:
    :new        # new buffer
    "xp         # paste register x into the buffer
    [edit the keystrokes]
    <Esc>       # return to normal mode
    0"xy$       # go to beginning of line; into register x, yank to end of line
    :bd!        # delete the new buffer without saving
    @x          # execute modified recording

==============================================================================
CtrlP                                                     *help_hotkeys-ctrlp*

<C-d>  " filename mode

==============================================================================
Surround                                               *help_hotkeys-surround*

Normal mode
-----------
ds   " delete a surrounding
cs   " change a surrounding
ys   " add a surrounding
yS   " add a surrounding and place the surrounded text on a new line + indent it
yss  " add a surrounding to the whole line
ySs  " add a surrounding to the whole line, place it on a new line + indent it
ySS  " same as ySs

Visual mode
-----------
s  " in visual mode, add a surrounding
S  " in visual mode, add a surrounding but place text on new line + indent it

Insert mode
-----------
<C-s>  " in insert mode, add a surrounding
<C-s><C-s>  " in insert mode, add a new line + surrounding + indent
<C-g>s  " same as <CTRL-s>
<C-g>S  " same as <CTRL-s><CTRL-s>

The . command will work with ds, cs, and yss if you install repeat.vim.

==============================================================================
TComment                                               *help_hotkeys-tcomment*

Primary key maps for normal and insert mode:

    <c-_><c-_>   :: :TComment
    <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>
    <c-_>b       :: :TCommentBlock
                    In insert mode, the cursor will be positioned inside
                    the comment. In normal mode, the cursor will stay
                    put.
    <c-_>a       :: :TCommentAs <QUERY COMMENT TYPE>
    <c-_>n       :: :TCommentAs &filetype <QUERY COUNT>
    <c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>
    <c-_>i       :: :TCommentInline (in normal and insert mode, this map will
                    create an empty inline comment, which isn't suitable for
                    all filetypes though)
                    In insert mode, the cursor will be positioned inside
                    the comment. In normal mode, the cursor will stay
                    put.
    <c-_>r       :: :TCommentRight
    <c-_>p       :: Comment the current inner paragraph
    <c-_><Count> :: Set the count argument (a number from 1 to 9) for use with
                    the subsequent tcomment map/command (see
                    |tcomment#Comment()|)
                    E.g. in JavaScript, in order to get an empty /** */
                    comment for documentation purposes, in insert mode type
                    <c-_>2<c-_>i
                    In order to get an empty block comment like >
                      /**
                       *
                       */
<                   type <c-_>2<c-_>b

==============================================================================
VIM Signature                                     *help_hotkeys-vim-signature*

mx           Toggle mark 'x' and display it in the leftmost column
dmx          Remove mark 'x' where x is a-zA-Z

m,           Place the next available mark
m.           If no mark on line, place the next available mark.
             Otherwise, remove (first) existing mark.
m-           Delete all marks from the current line
m<Space>     Delete all marks from the current buffer
]`           Jump to next mark
[`           Jump to prev mark
]'           Jump to start of next line containing a mark
['           Jump to start of prev line containing a mark
`]           Jump by alphabetical order to next mark
`[           Jump by alphabetical order to prev mark
']           Jump by alphabetical order to start of next line having a mark
'[           Jump by alphabetical order to start of prev line having a mark
m/           Open location list and display marks from current buffer

m[0-9]       Toggle the corresponding marker !@#$%^&*()
m<S-[0-9]>   Remove all markers of the same type
]-           Jump to next line having a marker of the same type
[-           Jump to prev line having a marker of the same type
]=           Jump to next line having a marker of any type
[=           Jump to prev line having a marker of any type
m?           Open location list and display markers from current buffer
m<BS>        Remove all markers

==============================================================================
VIM Easy Align                                  *help_hotkeys-vim-easy-align)*

try these commands:
 - vip<Enter>=
   - `v`isual-select `i`nner `p`aragraph
   - Start EasyAlign command (<Enter>)
   - Align around `=`
 - `gaip=`
   - Start EasyAlign command (`ga`) for `i`nner `p`aragraph
   - Align around `=`


==============================================================================
VIM Easygrep                                      *help_hotkeys-vim-easygrep)*

<Leader>vv  - Grep for the word under the cursor, match all occurences,
              like |gstar|
<Leader>vV  - Grep for the word under the cursor, match whole word, like
              |star|
<Leader>va  - Like vv, but add to existing list
<Leader>vA  - Like vV, but add to existing list
<Leader>vr  - Perform a global search search on the word under the cursor
              and prompt for a pattern with which to replace it.
<Leader>vo  - Select the files to search in and set grep options
<Leader>vy* - Invoke any option from the options explorer, where * is the
              shortcut for that option.
              e.g. <Leader>vyr - toggles recursion
                   <Leader>vyb - sets buffer grepping mode
                   etc.

==============================================================================
Tips                                                       *help_hotkeys-tips*

yiw                 " Copy the current word
viwp                " Replace the current word with the clipboard contents

:help key-notation          " List the meanings of all those <key>
:help encoding-values       " List supported encoding values
:set encoding=utf8          " Set how vim shall represent characters internally
:set fileencoding=utf-8     " Set the encoding for a particular file
:setlocal ff=[dos/unix/mac] " Set file format for current buffer
:help filetype              " List supported filetypes
:set ft?                    " get the filetype of the current file
:%!xxd[ -r]
:%!python -m json.tool

==============================================================================
Apply Help Documents Changing                          *help_hotkeys-helptags*

:helptags ~/.vim/doc
